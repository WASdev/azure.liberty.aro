#!/bin/bash

#      Copyright (c) Microsoft Corporation.
#      Copyright (c) IBM Corporation. 
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
# 
#           http://www.apache.org/licenses/LICENSE-2.0
# 
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

set -euo pipefail
IFS=$'\n\t'

# -e: immediately exit if any command has a non-zero exit status
# -o: prevents errors in a pipeline from being masked
# IFS new value is less likely to cause confusing bugs when looping arrays or arguments (e.g. $@)

usage() { echo "Usage: $0 -n <deploymentName> -p <pullSecretFile> -t <pullSecretEncoded> -c <aadClientId> -s <aadClientSecret> -a <aadObjectId> -r <rpObjectId> -g <resourceGroupName> -l <resourceGroupLocation>" 1>&2; exit 1; }

declare deploymentName=""
declare pullSecretFile=""
declare pullSecretEncoded=""
declare aadClientId=""
declare aadClientSecret=""
declare aadObjectId=""
declare rpObjectId=""
declare resourceGroupName=""
declare resourceGroupLocation=""

# Initialize parameters specified from command line
while getopts ":n:p:t:i:g:l:c:s:a:r:" arg; do
	case "${arg}" in
		n)
			deploymentName=${OPTARG}
			;;
		p)
			pullSecretFile=${OPTARG}
			;;
		t)
			pullSecretEncoded=${OPTARG}
			;;
		c)
			aadClientId=${OPTARG}
			;;
		s)
			aadClientSecret=${OPTARG}
			;;
		a)
			aadObjectId=${OPTARG}
			;;
		r)
			rpObjectId=${OPTARG}
			;;
		g)
			resourceGroupName=${OPTARG}
			;;
		l)
			resourceGroupLocation=${OPTARG}
			;;
		esac
done
shift $((OPTIND-1))

# Prompt for parameters is some required parameters are missing
if [[ -z "$deploymentName" ]]; then
	echo "Enter a name for this deployment:"
	read deploymentName
fi

if [[ -z "$resourceGroupName" ]]; then
	echo "This script will look for an existing resource group, otherwise a new one will be created "
	echo "You can create new resource groups with the CLI using: az group create "
	echo "Enter a resource group name:"
	read resourceGroupName
	[[ "${resourceGroupName:?}" ]]
fi

if [[ -z "$resourceGroupLocation" ]]; then
	echo "If creating a *new* resource group, you need to set a location "
	echo "You can lookup locations with the CLI using: az account list-locations "
	
	echo "Enter resource group location:"
	read resourceGroupLocation
fi

if [ -z "$deploymentName" ] || [ -z "$resourceGroupName" ]; then
	echo "Either one of deploymentName and resourceGroupName is empty"
	usage
fi

# templateFile Path - template file to be used
templateFilePath="../arm/mainTemplate.json"

if [ ! -f "$templateFilePath" ]; then
	echo "$templateFilePath not found"
	exit 1
fi

# parameter file path
parametersFilePath="../arm/parameters.json"

if [ ! -f "$parametersFilePath" ]; then
	echo "$parametersFilePath not found"
	exit 1
fi

# login to azure using your credentials
az account show 1> /dev/null

if [ $? != 0 ]; then
	az login
fi

set +e

# Check for existing RG
az group show --name $resourceGroupName 1> /dev/null

if [ $? != 0 ]; then
	echo "Resource group with name" $resourceGroupName "could not be found. Creating new resource group..."
	set -e
	(
		set -x
		az group create --name $resourceGroupName --location $resourceGroupLocation 1> /dev/null
	)
else
	echo "Using existing resource group..."
fi
resourceGroupLocation=$( az group show --name $resourceGroupName | jq -r '.location' )

# Read pull secret file
if [ -f "$pullSecretFile" ]; then
	pullSecret=$( cat "$pullSecretFile" | jq -c '.' )
	echo "Using pull secret from file: $pullSecretFile"
# Set as empty if pull secret string is not provided either
elif [ -n "$pullSecretEncoded" ]; then
	pullSecret=$( echo $pullSecretEncoded | base64 -d | jq -c '.' )
	echo "Using pull secret from encoded string"
else
	pullSecret="{}"
fi

# parameters JSON
parametersJson=$( cat $parametersFilePath | jq '.parameters' )
createCluster=$( echo $parametersJson | jq '.createCluster.value' | sed 's/"//g' )
parametersJson=$( echo $parametersJson | jq --argjson createCluster "$createCluster" '.createCluster.value = $createCluster' )
deployWLO=$( echo $parametersJson | jq '.deployWLO.value' | sed 's/"//g' )
parametersJson=$( echo $parametersJson | jq --argjson deployWLO "$deployWLO" '.deployWLO.value = $deployWLO' )
deployApplication=$( echo $parametersJson | jq '.deployApplication.value' | sed 's/"//g' )
parametersJson=$( echo $parametersJson | jq --argjson deployApp "$deployApplication" '.deployApplication.value = $deployApp' )
appReplicas=$( echo $parametersJson | jq '.appReplicas.value' | sed 's/"//g' )
parametersJson=$( echo $parametersJson | jq --argjson replicas "$appReplicas" '.appReplicas.value = $replicas' )
parametersJson=$( echo "$parametersJson" | jq --arg pullSecret "$pullSecret" '{"pullSecret": {"value":$pullSecret}} + .' )
parametersJson=$( echo "$parametersJson" | jq --arg aadClientId "$aadClientId" '{"aadClientId": {"value":$aadClientId}} + .' )
parametersJson=$( echo "$parametersJson" | jq --arg aadClientSecret "$aadClientSecret" '{"aadClientSecret": {"value":$aadClientSecret}} + .' )
parametersJson=$( echo "$parametersJson" | jq --arg aadObjectId "$aadObjectId" '{"aadObjectId": {"value":$aadObjectId}} + .' )
parametersJson=$( echo "$parametersJson" | jq --arg rpObjectId "$rpObjectId" '{"rpObjectId": {"value":$rpObjectId}} + .' )
autoScaling=$( echo $parametersJson | jq '.autoScaling.value' | sed 's/"//g' )
parametersJson=$( echo $parametersJson | jq --argjson autoScaling "$autoScaling" '.autoScaling.value = $autoScaling' )
parametersJson=$( echo "$parametersJson" | jq -c '.' )

# Start deployment
echo "Starting deployment..."
(
	az deployment group create --name "$deploymentName" --resource-group "$resourceGroupName" \
		--template-file "$templateFilePath" --parameters "$parametersJson"
)

if [[ $? -eq 0 ]]; then
	echo "Template has been successfully deployed"
fi
