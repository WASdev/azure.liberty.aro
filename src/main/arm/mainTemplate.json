{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "_artifactsLocation": {
            "type": "string",
            "defaultValue": "[deployment().properties.templateLink.uri]",
            "metadata": {
                "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
            }
        },
        "_artifactsLocationSasToken": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources."
            }
        },
        "createCluster": {
            "defaultValue": true,
            "type": "bool",
            "metadata": {
                "description": "Flag indicating whether to create a new cluster or not"
            }
        },
        "clusterName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Name for the existing cluster"
            }
        },
        "clusterRGName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Name for the resource group of the existing cluster"
            }
        },
        "pullSecret": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "Pull secret from cloud.redhat.com. The json should be input as a string"
            }
        },
        "aadClientId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "The application ID of a Microsoft Entra ID client application"
            }
        },
        "aadClientSecret": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "The secret of a Microsoft Entra ID client application"
            }
        },
        "aadObjectId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "The service principal Object ID of a Microsoft Entra ID client application"
            }
        },
        "rpObjectId": {
            "type": "String",
            "defaultValue": "",
            "metadata": {
                "description": "The service principal Object ID of the Azure Red Hat OpenShift Resource Provider"
            }
        },
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_D8s_v3",
            "metadata": {
                "description": "Master Node VM Type"
            }
        },
        "minWorkerCount": {
            "type": "int",
            "defaultValue": 3,
            "metadata": {
                "description": "The minimum worker node count"
            }
        },
        "maxWorkerCount": {
            "type": "int",
            "defaultValue": 10,
            "metadata": {
                "description": "The maximum worker node count"
            }
        },
        "workerVmSize": {
            "type": "string",
            "defaultValue": "Standard_D4s_v3",
            "metadata": {
                "description": "Worker Node VM Type"
            }
        },
        "deployWLO": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Flag indicating whether to deploy WebSphere Liberty Operator."
            }
        },
        "edition": {
            "type": "string",
            "defaultValue": "IBM WebSphere Application Server",
            "metadata": {
                "description": "Product edition"
            },
            "allowedValues": [
                "IBM WebSphere Application Server",
                "IBM WebSphere Application Server Liberty Core",
                "IBM WebSphere Application Server Network Deployment"
            ]
        },
        "productEntitlementSource": {
            "type": "string",
            "defaultValue": "Standalone",
            "metadata": {
                "description": "Entitlement source for the product"
            },
            "allowedValues": [
                "Standalone",
                "IBM WebSphere Hybrid Edition",
                "IBM Cloud Pak for Applications",
                "IBM WebSphere Application Server Family Edition"
            ]
        },  
        "deployApplication": {
            "defaultValue": false,
            "type": "bool",
            "metadata": {
                "description": "Flag indicating whether to deploy an application"
            }
        },
        "appImagePath": {
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "The image path of the application"
            }
        },  
        "autoScaling": {
            "defaultValue": false,
            "type": "bool",
            "metadata": {
                "description": "Flag indicating whether to enable autoscaling for app deployment"
            }
        },
        "cpuUtilizationPercentage": {
            "type": "int",
            "defaultValue": 80,
            "metadata": {
                "description": "The target average CPU utilization percentage for autoscaling"
            }
        },
        "minReplicas": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "The minimum application replicas for autoscaling"
            }
        },
        "maxReplicas": {
            "type": "int",
            "defaultValue": 100,
            "metadata": {
                "description": "The maximum application replicas for autoscaling"
            }
        },
        "requestCPUMillicore": {
            "type": "int",
            "defaultValue": 300,
            "metadata": {
                "description": "The minimum required CPU core (millicore) over all the replicas for autoscaling"
            }
        },
        "appReplicas": {
            "type": "int",
            "defaultValue": 2,
            "metadata": {
                "description": "The number of application replicas to deploy"
            }
        },
        "guidValue": {
            "defaultValue": "[newGuid()]",
            "type": "securestring"
        }
    },
    "variables": {
        "const_appImage": "[concat(variables('const_appImageName'), ':', variables('const_appImageTag'))]",
        "const_appImageName": "[concat('image', variables('const_suffix'))]",
        "const_appImageTag": "1.0.0",
        "const_appName": "[concat('app', variables('const_suffix'))]",
        "const_appProjName": "[concat('project', variables('const_suffix'))]",
        "const_arguments1": "[concat(variables('const_clusterRGName'), ' ', variables('name_clusterName'), ' ', variables('const_scriptLocation'), ' ', parameters('deployApplication'))]",
        "const_arguments2": "[concat(' ', if(empty(parameters('appImagePath')), 'NA', parameters('appImagePath')), ' ', variables('const_appName'), ' ', variables('const_appProjName'), ' ', variables('const_appImage'), ' ', parameters('appReplicas'))]",
        "const_clusterDomainName": "[concat('domain', variables('const_suffix'))]",
        "const_clusterRGName": "[if(parameters('createCluster'), resourceGroup().name, parameters('clusterRGName'))]",
        "const_cmdToGetApiServer": "[concat('az aro show -g ', variables('const_clusterRGName'), ' -n ', variables('name_clusterName'), ' --query apiserverProfile.url -o tsv')]",
        "const_cmdToGetKubeadminCredentials": "[concat('az aro list-credentials -g ', variables('const_clusterRGName'), ' -n ', variables('name_clusterName'))]",
        "const_cmdToGetKubeadminPassword": "[concat(variables('const_cmdToGetKubeadminCredentials'), ' --query kubeadminPassword -o tsv')]",
        "const_cmdToGetKubeadminUsername": "[concat(variables('const_cmdToGetKubeadminCredentials'), ' --query kubeadminUsername -o tsv')]",
        "const_contribRole": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "const_identityName": "[concat('uami', variables('const_suffix'))]",
        "const_metric": "[if(or(equals(parameters('productEntitlementSource'), 'Standalone'), equals(parameters('productEntitlementSource'), 'IBM WebSphere Application Server Family Edition')), 'Processor Value Unit (PVU)', 'Virtual Processor Core (VPC)')]",
        "const_scriptLocation": "[uri(parameters('_artifactsLocation'), 'scripts/')]",
        "const_suffix": "[take(replace(parameters('guidValue'), '-', ''), 6)]",
        "name_clusterName": "[if(parameters('createCluster'), concat('cluster', variables('const_suffix')), parameters('clusterName'))]",
        "name_clusterVNetName": "[concat('vnet', variables('const_suffix'))]",
        "name_deploymentScriptName": "[concat('aroscript', variables('const_suffix'))]",
        "name_preflightDSName": "[concat('preflight', variables('const_suffix'))]",
        "name_roleAssignmentName": "[guid(format('{0}{1}Role assignment in group{0}', resourceGroup().name, variables('ref_identityId')))]",
        "name_roleAssignmentToCluserRGName": "[guid(format('{0}{1}Role assignment in group{0}', variables('const_clusterRGName'), variables('ref_identityId')))]",
        "ref_identityId": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('const_identityName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "${azure.apiVersion.deployments}",
            "name": "${customer.usage.attribution.id}",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "${azure.apiVersion.deployments}",
            "name": "${aro.start}",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                    ]
                }
            }
        },
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "name": "[variables('const_identityName')]",
            "apiVersion": "${azure.apiVersion.userAssignedIdentities}",
            "location": "[parameters('location')]"
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "${azure.apiVersion.roleAssignment}",
            "name": "[variables('name_roleAssignmentName')]",
            "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('const_identityName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('const_contribRole')]",
                "principalId": "[reference(variables('ref_identityId')).principalId]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "condition": "[not(parameters('createCluster'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "${azure.apiVersion.deployments}",
            "name": "[variables('name_roleAssignmentToCluserRGName')]",
            "resourceGroup": "[variables('const_clusterRGName')]",
            "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('const_identityName'))]"
            ],
            "properties": {
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "roleAssignmentName": {
                            "type": "string"
                        },
                        "contributorRole": {
                            "type": "string"
                        },
                        "principalId": {
                            "type": "string"
                        }
                    },
                    "resources": [
                        {
                            "type": "Microsoft.Authorization/roleAssignments",
                            "apiVersion": "${azure.apiVersion.roleAssignment}",
                            "name": "[parameters('roleAssignmentName')]",
                            "properties": {
                                "roleDefinitionId": "[parameters('contributorRole')]",
                                "principalId": "[parameters('principalId')]",
                                "principalType": "ServicePrincipal"
                            }
                        }
                    ]
                },
                "parameters": {
                    "roleAssignmentName": {
                        "value": "[variables('name_roleAssignmentToCluserRGName')]"
                    },
                    "contributorRole": {
                        "value": "[variables('const_contribRole')]"
                    },
                    "principalId": {
                        "value": "[reference(variables('ref_identityId')).principalId]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deploymentScripts",
            "apiVersion": "${azure.apiVersion.deploymentScript}",
            "name": "[variables('name_preflightDSName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Authorization/roleAssignments', variables('name_roleAssignmentName'))]",
                "[resourceId(variables('const_clusterRGName'), 'Microsoft.Resources/deployments', variables('name_roleAssignmentToCluserRGName'))]"
            ],
            "kind": "AzureCLI",
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('const_identityName')))]": {}
                }
            },
            "properties": {
                "AzCliVersion": "2.53.0",
                "primaryScriptUri": "[uri(variables('const_scriptLocation'), concat('preflight.sh', parameters('_artifactsLocationSasToken')))]",
                "environmentVariables": [
                    {
                        "name": "CREATE_CLUSTER",
                        "value": "[parameters('createCluster')]"
                    },
                    {
                        "name": "AAD_CLIENT_ID",
                        "value": "[parameters('aadClientId')]"
                    },
                    {
                        "name": "AAD_OBJECT_ID",
                        "value": "[parameters('aadObjectId')]"
                    },
                    {
                        "name": "DEPLOY_APPLICATION",
                        "value": "[parameters('deployApplication')]"
                    },
                    {
                        "name": "SOURCE_IMAGE_PATH",
                        "value": "[parameters('appImagePath')]"
                    }
                ],
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D"
            }
        },
        {
           "condition": "[parameters('createCluster')]",
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "${azure.apiVersion.virtualNetworks}",
            "name": "[variables('name_clusterVNetName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deploymentScripts', variables('name_preflightDSName'))]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "10.100.0.0/15"
                    ]
                },
                "subnets": [
                    {
                        "name": "master",
                        "properties": {
                            "addressPrefix": "10.100.76.0/24",
                            "serviceEndpoints": [
                                {
                                    "service": "Microsoft.ContainerRegistry"
                                }
                            ],
                            "privateLinkServiceNetworkPolicies": "Disabled"
                        }
                    },
                    {
                        "name": "worker",
                        "properties": {
                            "addressPrefix": "10.100.70.0/23",
                            "serviceEndpoints": [
                                {
                                    "service": "Microsoft.ContainerRegistry"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        {
            "condition": "[parameters('createCluster')]",
            "type": "Microsoft.Network/virtualNetworks/providers/roleAssignments",
            "apiVersion": "${azure.apiVersion.vNetRoleAssignment}",
            "name": "[concat(variables('name_clusterVNetName'), '/Microsoft.Authorization/', guid(resourceGroup().id, deployment().name, 'aadObjectId'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('name_clusterVNetName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('const_contribRole')]",
                "principalId": "[parameters('aadObjectId')]"
            }
        },
        {
            "condition": "[parameters('createCluster')]",
            "type": "Microsoft.Network/virtualNetworks/providers/roleAssignments",
            "apiVersion": "${azure.apiVersion.vNetRoleAssignment}",
            "name": "[concat(variables('name_clusterVNetName'), '/Microsoft.Authorization/', guid(resourceGroup().id, deployment().name, 'rpObjectId'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('name_clusterVNetName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('const_contribRole')]",
                "principalId": "[parameters('rpObjectId')]"
            }
        },
        {
            "condition": "[parameters('createCluster')]",
            "type": "Microsoft.RedHatOpenShift/openShiftClusters",
            "apiVersion": "${azure.apiVersion.aroCluster}",
            "name": "[variables('name_clusterName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('name_clusterVNetName'))]"
            ],
            "properties": {
                "clusterProfile": {
                    "domain": "[variables('const_clusterDomainName')]",
                    "resourceGroupId": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', concat('MC_', resourceGroup().name, '_', variables('name_clusterName'), '_', parameters('location')))]",
                    "pullSecret": "[parameters('pullSecret')]",
                    "fipsValidatedModules": "Disabled"
                },
                "networkProfile": {
                    "podCidr": "10.128.0.0/14",
                    "serviceCidr": "172.30.0.0/16"
                },
                "servicePrincipalProfile": {
                    "clientId": "[parameters('aadClientId')]",
                    "clientSecret": "[parameters('aadClientSecret')]"
                },
                "masterProfile": {
                    "vmSize": "[parameters('vmSize')]",
                    "subnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('name_clusterVNetName'), 'master')]",
                    "encryptionAtHost": "Disabled"
                },
                "workerProfiles": [
                    {
                        "name": "worker",
                        "vmSize": "[parameters('workerVmSize')]",
                        "diskSizeGB": 128,
                        "subnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('name_clusterVNetName'), 'worker')]",
                        "count": "[parameters('minWorkerCount')]",
                        "encryptionAtHost": "Disabled"
                    }
                ],
                "apiserverProfile": {
                    "visibility": "Public"
                },
                "ingressProfiles": [
                    {
                        "name": "default",
                        "visibility": "Public"
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Resources/deploymentScripts",
            "apiVersion": "${azure.apiVersion.deploymentScript}",
            "name": "[variables('name_deploymentScriptName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.RedHatOpenShift/openShiftClusters', variables('name_clusterName'))]"
            ],
            "kind": "AzureCLI",
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('const_identityName')))]": {}
                }
            },
            "properties": {
                "AzCliVersion": "2.15.0",
                "arguments": "[concat(variables('const_arguments1'), variables('const_arguments2'))]",
                "primaryScriptUri": "[uri(variables('const_scriptLocation'), concat('install.sh', parameters('_artifactsLocationSasToken')))]",
                "supportingScriptUris":[
                    "[uri(variables('const_scriptLocation'), concat('open-liberty-operator-subscription.yaml', parameters('_artifactsLocationSasToken')))]",
                    "[uri(variables('const_scriptLocation'), concat('open-liberty-application.yaml.template', parameters('_artifactsLocationSasToken')))]",
                    "[uri(variables('const_scriptLocation'), concat('catalog-source.yaml', parameters('_artifactsLocationSasToken')))]",
                    "[uri(variables('const_scriptLocation'), concat('websphere-liberty-operator-subscription.yaml', parameters('_artifactsLocationSasToken')))]",
                    "[uri(variables('const_scriptLocation'), concat('websphere-liberty-application.yaml.template', parameters('_artifactsLocationSasToken')))]",
                    "[uri(variables('const_scriptLocation'), concat('open-liberty-application-autoscaling.yaml.template', parameters('_artifactsLocationSasToken')))]",
                    "[uri(variables('const_scriptLocation'), concat('websphere-liberty-application-autoscaling.yaml.template', parameters('_artifactsLocationSasToken')))]"
                ],
                "environmentVariables": [
                    {
                        "name": "DEPLOY_WLO",
                        "value": "[parameters('deployWLO')]"
                    },
                    {
                        "name": "WLA_EDITION",
                        "value": "[parameters('edition')]"
                    },
                    {
                        "name": "WLA_PRODUCT_ENTITLEMENT_SOURCE",
                        "value": "[parameters('productEntitlementSource')]"
                    },
                    {
                        "name": "WLA_METRIC",
                        "value": "[variables('const_metric')]"
                    },
                    {
                        "name": "CREATE_CLUSTER",
                        "value": "[parameters('createCluster')]"
                    },
                    {
                        "name": "MAX_NODES",
                        "value": "[add(parameters('maxWorkerCount'), 3)]"
                    },
                    {
                        "name": "ALLOCATABLE_WORKER_NODES",
                        "value": "[sub(parameters('maxWorkerCount'), parameters('minWorkerCount'))]"
                    },
                    {
                        "name": "AUTO_SCALING",
                        "value": "[parameters('autoScaling')]"
                    },
                    {
                        "name": "CPU_UTILIZATION_PERCENTAGE",
                        "value": "[parameters('cpuUtilizationPercentage')]"
                    },
                    {
                        "name": "MIN_REPLICAS",
                        "value": "[parameters('minReplicas')]"
                    },
                    {
                        "name": "MAX_REPLICAS",
                        "value": "[parameters('maxReplicas')]"
                    },
                    {
                        "name": "REQUEST_CPU_MILLICORE",
                        "value": "[parameters('requestCPUMillicore')]"
                    }
                ],
                "timeout": "PT2H",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D"
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "${azure.apiVersion.deployments}",
            "name": "${aro.end}",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deploymentScripts', variables('name_deploymentScriptName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                    ]
                }
            }
        },
        {
            "condition": "[and(parameters('deployApplication'), parameters('autoScaling'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "${azure.apiVersion.deployments}",
            "name": "${autoscaling.id}",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deploymentScripts', variables('name_deploymentScriptName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                    ]
                }
            }
        }
    ],
    "outputs": {
        "appEndpoint (Append context root defined in the 'server.xml' of your application if it's not equal to '/')": {
            "condition": "[parameters('deployApplication')]",
            "value": "[reference(variables('name_deploymentScriptName')).outputs.appEndpoint]",
            "type": "string"
        },
        "clusterName": {
            "value": "[variables('name_clusterName')]",
            "type": "string"
        },
        "clusterRGName": {
            "value": "[variables('const_clusterRGName')]",
            "type": "string"
        },
        "clusterConsoleUrl": {
            "value": "[reference(variables('name_deploymentScriptName')).outputs.consoleUrl]",
            "type": "string"
        },
        "appProjName": {
            "value": "[variables('const_appProjName')]",
            "type": "string"
        },
        "appName": {
            "condition": "[parameters('deployApplication')]",
            "value": "[variables('const_appName')]",
            "type": "string"
        },
        "appImage": {
            "condition": "[parameters('deployApplication')]",
            "value": "[variables('const_appImage')]",
            "type": "string"
        },
        "cmdToGetKubeadminCredentials": {
            "value": "[variables('const_cmdToGetKubeadminCredentials')]",
            "type": "string"
        },
        "cmdToLoginWithKubeadmin": {
            "value": "[concat('oc login $(', variables('const_cmdToGetApiServer'), ') -u $(', variables('const_cmdToGetKubeadminUsername'), ') -p $(', variables('const_cmdToGetKubeadminPassword'), ')')]",
            "type": "string"
        },
        "cmdToGetAppInstance": {
            "condition": "[parameters('deployApplication')]",
            "value": "[concat('oc get openlibertyapplication ', variables('const_appName'), ' -n ', variables('const_appProjName'))]",
            "type": "string"
        },
        "cmdToGetAppDeployment": {
            "condition": "[parameters('deployApplication')]",
            "value": "[concat('oc get deployment ', variables('const_appName'), ' -n ', variables('const_appProjName'))]",
            "type": "string"
        },
        "cmdToGetAppPods": {
            "condition": "[parameters('deployApplication')]",
            "value": "[concat('oc get pod -n ', variables('const_appProjName'))]",
            "type": "string"
        },
        "cmdToGetAppRoute": {
            "condition": "[parameters('deployApplication')]",
            "value": "[concat('oc get route ', variables('const_appName'), ' -n ', variables('const_appProjName'))]",
            "type": "string"
        },
        "cmdToGetAppService": {
            "condition": "[parameters('deployApplication')]",
            "value": "[concat('oc get service ', variables('const_appName'), ' -n ', variables('const_appProjName'))]",
            "type": "string"
        },
        "cmdToCreateImageStream (Please replace '<image-name>' with yours and execute command in `cmdToLoginWithProjManager` before executing this one)": {
            "value": "[concat('oc create imagestream <image-name> -n ', variables('const_appProjName'))]",
            "type": "string"
        },
        "cmdToCreateBuildConfig (Please replace '<build-config-name>' and '<image-name>:<tag>' with yours, and execute command in `cmdToCreateImageStream` before executing this one)": {
            "value": "[concat('oc new-build --name <build-config-name> --binary --strategy docker --to <image-name>:<tag> -n ', variables('const_appProjName'))]",
            "type": "string"
        },
        "cmdToStartBuild (Please replace '<build-config-name>' and '<path-to-dockerfile-directory>' with yours, and execute command in `cmdToCreateBuildConfig` before executing this one)": {
            "value": "[concat('oc start-build <build-config-name> --from-dir <path-to-dockerfile-directory> --follow -n ', variables('const_appProjName'))]",
            "type": "string"
        },
        "appDeploymentYamlEncoded (Use `echo \"copied-value\" | base64 -d` to decode the text)": {
            "condition": "[parameters('deployApplication')]",
            "value": "[reference(variables('name_deploymentScriptName')).outputs.appDeploymentYaml]",
            "type": "string"
        },
        "appDeploymentYaml": {
            "condition": "[parameters('deployApplication')]",
            "value": "[format('echo \"{0}\" | base64 -d', reference(variables('name_deploymentScriptName')).outputs.appDeploymentYaml)]",
            "type": "string"
        },
        "appDeploymentTemplateYamlEncoded (Use `echo \"copied-value\" | base64 -d` to decode the text)": {
            "condition": "[not(parameters('deployApplication'))]",
            "value": "[reference(variables('name_deploymentScriptName')).outputs.appDeploymentYaml]",
            "type": "string"
        },
        "appDeploymentTemplateYaml": {
            "condition": "[not(parameters('deployApplication'))]",
            "value": "[format('echo \"{0}\" | base64 -d', reference(variables('name_deploymentScriptName')).outputs.appDeploymentYaml)]",
            "type": "string"
        },
        "cmdToUpdateOrCreateApplication (Please execute command in `cmdToLoginWithProjManager` before executing this one)": {
            "value": "[concat('oc apply -f <application-yaml-file-path> -n ', variables('const_appProjName'))]",
            "type": "string"
        }
    }
}
